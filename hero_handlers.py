from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database import get_session, Hero, Build, User, FavoriteHero
import json
from datetime import datetime

router = Router()

class HeroStates(StatesGroup):
    waiting_for_build_items = State()
    waiting_for_build_description = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≥–µ—Ä–æ—è
@router.callback_query(F.data.startswith("hero_"))
async def show_hero(callback: CallbackQuery):
    hero_id = int(callback.data.split("_")[1])
    session = get_session()
    hero = session.query(Hero).filter_by(id=hero_id).first()
    user = session.query(User).filter_by(telegram_id=callback.from_user.id).first()
    
    if not hero:
        await callback.message.edit_text("‚ùå –ì–µ—Ä–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ –≥–µ—Ä–æ–π –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
    is_favorite = False
    if user:
        favorite = session.query(FavoriteHero).filter_by(
            user_id=user.id,
            hero_id=hero.id
        ).first()
        is_favorite = favorite is not None
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="‚≠êÔ∏è –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ" if not is_favorite else "‚≠êÔ∏è –£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ",
                callback_data=f"toggle_favorite_{hero.id}"
            )
        ],
        [
            InlineKeyboardButton(text="üéØ –°–±–æ—Ä–∫–∏", callback_data=f"hero_builds_{hero.id}"),
            InlineKeyboardButton(text="üìñ –ì–∞–π–¥", callback_data=f"hero_guide_{hero.id}")
        ],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="heroes")]
    ])
    
    await callback.message.edit_text(
        f"üèÜ {hero.name}\n\n"
        f"–†–æ–ª—å: {hero.role}\n"
        f"–°–ª–æ–∂–Ω–æ—Å—Ç—å: {hero.difficulty}\n"
        f"–í–∏–Ω—Ä–µ–π—Ç: {hero.win_rate}%\n"
        f"–¢–∏—Ä: {hero.tier}\n\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ:\n{hero.description}",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
@router.callback_query(F.data.startswith("toggle_favorite_"))
async def toggle_favorite(callback: CallbackQuery):
    hero_id = int(callback.data.split("_")[2])
    session = get_session()
    user = session.query(User).filter_by(telegram_id=callback.from_user.id).first()
    
    if not user:
        await callback.message.edit_text(
            "‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–ª—è—Ç—å –≥–µ—Ä–æ–µ–≤ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"
        )
        return
    
    favorite = session.query(FavoriteHero).filter_by(
        user_id=user.id,
        hero_id=hero_id
    ).first()
    
    if favorite:
        session.delete(favorite)
        message = "‚úÖ –ì–µ—Ä–æ–π —É–¥–∞–ª–µ–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"
    else:
        new_favorite = FavoriteHero(
            user_id=user.id,
            hero_id=hero_id,
            created_at=datetime.now()
        )
        session.add(new_favorite)
        message = "‚úÖ –ì–µ—Ä–æ–π –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"
    
    session.commit()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≥–µ—Ä–æ–µ
    hero = session.query(Hero).filter_by(id=hero_id).first()
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="‚≠êÔ∏è –£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ" if favorite else "‚≠êÔ∏è –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ",
                callback_data=f"toggle_favorite_{hero.id}"
            )
        ],
        [
            InlineKeyboardButton(text="üéØ –°–±–æ—Ä–∫–∏", callback_data=f"hero_builds_{hero.id}"),
            InlineKeyboardButton(text="üìñ –ì–∞–π–¥", callback_data=f"hero_guide_{hero.id}")
        ],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="heroes")]
    ])
    
    await callback.message.edit_text(
        f"üèÜ {hero.name}\n\n"
        f"–†–æ–ª—å: {hero.role}\n"
        f"–°–ª–æ–∂–Ω–æ—Å—Ç—å: {hero.difficulty}\n"
        f"–í–∏–Ω—Ä–µ–π—Ç: {hero.win_rate}%\n"
        f"–¢–∏—Ä: {hero.tier}\n\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ:\n{hero.description}",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–±–æ—Ä–æ–∫ –≥–µ—Ä–æ—è
@router.callback_query(F.data.startswith("hero_builds_"))
async def show_hero_builds(callback: CallbackQuery):
    hero_id = int(callback.data.split("_")[2])
    session = get_session()
    hero = session.query(Hero).filter_by(id=hero_id).first()
    user = session.query(User).filter_by(telegram_id=callback.from_user.id).first()
    
    if not hero:
        await callback.message.edit_text("‚ùå –ì–µ—Ä–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    builds = session.query(Build).filter_by(hero_id=hero_id).all()
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    for build in builds:
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(
                text=f"{build.name} ({build.type})",
                callback_data=f"build_{build.id}"
            )
        ])
    
    if user:
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(
                text="‚ûï –°–æ–∑–¥–∞—Ç—å —Å–±–æ—Ä–∫—É",
                callback_data=f"create_build_{hero.id}"
            )
        ])
    
    keyboard.inline_keyboard.append([
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"hero_{hero.id}")
    ])
    
    await callback.message.edit_text(
        f"üéØ –°–±–æ—Ä–∫–∏ –¥–ª—è {hero.name}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–±–æ—Ä–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è —Å–±–æ—Ä–∫–∏ –¥–ª—è –≥–µ—Ä–æ—è
@router.callback_query(F.data.startswith("create_build_"))
async def create_hero_build(callback: CallbackQuery, state: FSMContext):
    hero_id = int(callback.data.split("_")[2])
    await state.set_state(HeroStates.waiting_for_build_items)
    await state.update_data(hero_id=hero_id)
    
    await callback.message.edit_text(
        "üìù –°–æ–∑–¥–∞–Ω–∏–µ —Å–±–æ—Ä–∫–∏\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã —Å–±–æ—Ä–∫–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Å–±–æ—Ä–∫–∏
@router.message(HeroStates.waiting_for_build_items)
async def process_build_items(message: Message, state: FSMContext):
    await state.update_data(items=message.text)
    await state.set_state(HeroStates.waiting_for_build_description)
    
    await message.answer(
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–±–æ—Ä–∫–∏:"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è —Å–±–æ—Ä–∫–∏
@router.message(HeroStates.waiting_for_build_description)
async def process_build_description(message: Message, state: FSMContext):
    data = await state.get_data()
    session = get_session()
    user = session.query(User).filter_by(telegram_id=message.from_user.id).first()
    
    build = Build(
        user_id=user.id,
        hero_id=data['hero_id'],
        items=data['items'],
        description=message.text,
        created_at=datetime.now()
    )
    session.add(build)
    session.commit()
    
    await state.clear()
    await message.answer(
        "‚úÖ –°–±–æ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
        f"–ü—Ä–µ–¥–º–µ—Ç—ã: {data['items']}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {message.text}"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≥–∞–π–¥–∞ –≥–µ—Ä–æ—è
@router.callback_query(F.data.startswith("hero_guide_"))
async def show_hero_guide(callback: CallbackQuery):
    hero_id = int(callback.data.split("_")[2])
    session = get_session()
    hero = session.query(Hero).filter_by(id=hero_id).first()
    
    if not hero:
        await callback.message.edit_text("‚ùå –ì–µ—Ä–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"hero_{hero.id}")]
    ])
    
    await callback.message.edit_text(
        f"üìñ –ì–∞–π–¥ –ø–æ {hero.name}\n\n"
        f"{hero.guide}",
        reply_markup=keyboard
    ) 