from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database import get_session, User, Hero, Build, Note
import json
from datetime import datetime

router = Router()

class ProfileStates(StatesGroup):
    waiting_for_nickname = State()
    waiting_for_game_id = State()
    waiting_for_note = State()
    waiting_for_build_name = State()
    waiting_for_build_description = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
@router.callback_query(F.data == "create_profile")
async def create_profile(callback: CallbackQuery, state: FSMContext):
    await state.set_state(ProfileStates.waiting_for_nickname)
    await callback.message.edit_text(
        "üìù –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∏–≥—Ä–æ–≤–æ–π –Ω–∏–∫–Ω–µ–π–º:"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∏–∫–Ω–µ–π–º–∞
@router.message(ProfileStates.waiting_for_nickname)
async def process_nickname(message: Message, state: FSMContext):
    await state.update_data(nickname=message.text)
    await state.set_state(ProfileStates.waiting_for_game_id)
    await message.answer(
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∏–≥—Ä–æ–≤–æ–π ID:"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è ID
@router.message(ProfileStates.waiting_for_game_id)
async def process_game_id(message: Message, state: FSMContext):
    try:
        game_id = int(message.text)
        data = await state.get_data()
        
        session = get_session()
        user = User(
            telegram_id=message.from_user.id,
            nickname=data['nickname'],
            game_id=game_id,
            created_at=datetime.now()
        )
        session.add(user)
        session.commit()
        
        await state.clear()
        await message.answer(
            "‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
            f"–ù–∏–∫: {data['nickname']}\n"
            f"ID: {game_id}"
        )
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID:"
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –≥–µ—Ä–æ–µ–≤
@router.callback_query(F.data == "favorites")
async def show_favorites(callback: CallbackQuery):
    session = get_session()
    user = session.query(User).filter_by(telegram_id=callback.from_user.id).first()
    
    if not user:
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–ª—è—Ç—å –≥–µ—Ä–æ–µ–≤ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ."
        )
        return
    
    favorites = json.loads(user.favorites) if user.favorites else []
    heroes = session.query(Hero).filter(Hero.id.in_(favorites)).all()
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    for hero in heroes:
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(
                text=f"{hero.name} ({hero.role})",
                callback_data=f"hero_{hero.id}"
            )
        ])
    
    keyboard.inline_keyboard.append([
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="profile")
    ])
    
    await callback.message.edit_text(
        "‚≠êÔ∏è –ò–∑–±—Ä–∞–Ω–Ω—ã–µ –≥–µ—Ä–æ–∏\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥–µ—Ä–æ—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–±–æ—Ä–æ–∫
@router.callback_query(F.data == "builds")
async def show_builds(callback: CallbackQuery):
    session = get_session()
    user = session.query(User).filter_by(telegram_id=callback.from_user.id).first()
    
    if not user:
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–±–æ—Ä–∫–∏."
        )
        return
    
    builds = session.query(Build).filter_by(user_id=user.id).all()
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    for build in builds:
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(
                text=build.name,
                callback_data=f"build_{build.id}"
            )
        ])
    
    keyboard.inline_keyboard.append([
        InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å —Å–±–æ—Ä–∫—É", callback_data="create_build"),
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="profile")
    ])
    
    await callback.message.edit_text(
        "üéØ –°–±–æ—Ä–∫–∏\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–±–æ—Ä–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è —Å–±–æ—Ä–∫–∏
@router.callback_query(F.data == "create_build")
async def create_build(callback: CallbackQuery, state: FSMContext):
    await state.set_state(ProfileStates.waiting_for_build_name)
    await callback.message.edit_text(
        "üìù –°–æ–∑–¥–∞–Ω–∏–µ —Å–±–æ—Ä–∫–∏\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–±–æ—Ä–∫–∏:"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Å–±–æ—Ä–∫–∏
@router.message(ProfileStates.waiting_for_build_name)
async def process_build_name(message: Message, state: FSMContext):
    await state.update_data(build_name=message.text)
    await state.set_state(ProfileStates.waiting_for_build_description)
    await message.answer(
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–±–æ—Ä–∫–∏:"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è —Å–±–æ—Ä–∫–∏
@router.message(ProfileStates.waiting_for_build_description)
async def process_build_description(message: Message, state: FSMContext):
    data = await state.get_data()
    session = get_session()
    user = session.query(User).filter_by(telegram_id=message.from_user.id).first()
    
    build = Build(
        user_id=user.id,
        name=data['build_name'],
        description=message.text,
        created_at=datetime.now()
    )
    session.add(build)
    session.commit()
    
    await state.clear()
    await message.answer(
        "‚úÖ –°–±–æ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {data['build_name']}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {message.text}"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–º–µ—Ç–æ–∫
@router.callback_query(F.data == "notes")
async def show_notes(callback: CallbackQuery):
    session = get_session()
    user = session.query(User).filter_by(telegram_id=callback.from_user.id).first()
    
    if not user:
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫–∏."
        )
        return
    
    notes = session.query(Note).filter_by(user_id=user.id).all()
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    for note in notes:
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(
                text=note.title,
                callback_data=f"note_{note.id}"
            )
        ])
    
    keyboard.inline_keyboard.append([
        InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–º–µ—Ç–∫—É", callback_data="create_note"),
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="profile")
    ])
    
    await callback.message.edit_text(
        "üìù –ó–∞–º–µ—Ç–∫–∏\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–º–µ—Ç–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏
@router.callback_query(F.data == "create_note")
async def create_note(callback: CallbackQuery, state: FSMContext):
    await state.set_state(ProfileStates.waiting_for_note)
    await callback.message.edit_text(
        "üìù –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏:"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∑–∞–º–µ—Ç–∫–∏
@router.message(ProfileStates.waiting_for_note)
async def process_note(message: Message, state: FSMContext):
    session = get_session()
    user = session.query(User).filter_by(telegram_id=message.from_user.id).first()
    
    note = Note(
        user_id=user.id,
        title=message.text[:30] + "..." if len(message.text) > 30 else message.text,
        content=message.text,
        created_at=datetime.now()
    )
    session.add(note)
    session.commit()
    
    await state.clear()
    await message.answer(
        "‚úÖ –ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
        f"–¢–µ–∫—Å—Ç: {message.text}"
    ) 