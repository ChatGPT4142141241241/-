from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database import get_session, Tournament, User, TournamentParticipant
from datetime import datetime

router = Router()

class TournamentStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_description = State()
    waiting_for_start_date = State()
    waiting_for_rewards = State()
    waiting_for_team_name = State()
    waiting_for_team_members = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç—É—Ä–Ω–∏—Ä–æ–≤
@router.callback_query(F.data == "tournaments")
async def show_tournaments(callback: CallbackQuery):
    session = get_session()
    user = session.query(User).filter_by(telegram_id=callback.from_user.id).first()
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã
    active_tournaments = session.query(Tournament).filter(
        Tournament.status == "active"
    ).all()
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    for tournament in active_tournaments:
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(
                text=f"{tournament.name} ({tournament.start_date.strftime('%d.%m.%Y')})",
                callback_data=f"tournament_{tournament.id}"
            )
        ])
    
    if user and user.is_admin:
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä", callback_data="create_tournament")
        ])
    
    keyboard.inline_keyboard.append([
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu")
    ])
    
    await callback.message.edit_text(
        "üèÜ –¢—É—Ä–Ω–∏—Ä—ã\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç—É—Ä–Ω–∏—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç—É—Ä–Ω–∏—Ä–∞
@router.callback_query(F.data.startswith("tournament_"))
async def show_tournament(callback: CallbackQuery):
    tournament_id = int(callback.data.split("_")[1])
    session = get_session()
    tournament = session.query(Tournament).filter_by(id=tournament_id).first()
    user = session.query(User).filter_by(telegram_id=callback.from_user.id).first()
    
    if not tournament:
        await callback.message.edit_text("‚ùå –¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—á–∞—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ç—É—Ä–Ω–∏—Ä–µ
    is_participant = False
    if user:
        participant = session.query(TournamentParticipant).filter_by(
            user_id=user.id,
            tournament_id=tournament.id
        ).first()
        is_participant = participant is not None
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    
    if tournament.status == "active" and not is_participant:
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(
                text="üéÆ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å",
                callback_data=f"join_tournament_{tournament.id}"
            )
        ])
    
    keyboard.inline_keyboard.append([
        InlineKeyboardButton(text="üìã –£—á–∞—Å—Ç–Ω–∏–∫–∏", callback_data=f"participants_{tournament.id}"),
        InlineKeyboardButton(text="üèÜ –ù–∞–≥—Ä–∞–¥—ã", callback_data=f"rewards_{tournament.id}")
    ])
    
    keyboard.inline_keyboard.append([
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="tournaments")
    ])
    
    await callback.message.edit_text(
        f"üèÜ {tournament.name}\n\n"
        f"–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {tournament.start_date.strftime('%d.%m.%Y')}\n"
        f"–°—Ç–∞—Ç—É—Å: {tournament.status}\n\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ:\n{tournament.description}",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—á–∞—Å—Ç–∏—è –≤ —Ç—É—Ä–Ω–∏—Ä–µ
@router.callback_query(F.data.startswith("join_tournament_"))
async def join_tournament(callback: CallbackQuery, state: FSMContext):
    tournament_id = int(callback.data.split("_")[2])
    await state.set_state(TournamentStates.waiting_for_team_name)
    await state.update_data(tournament_id=tournament_id)
    
    await callback.message.edit_text(
        "üéÆ –£—á–∞—Å—Ç–∏–µ –≤ —Ç—É—Ä–Ω–∏—Ä–µ\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã:"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
@router.message(TournamentStates.waiting_for_team_name)
async def process_team_name(message: Message, state: FSMContext):
    await state.update_data(team_name=message.text)
    await state.set_state(TournamentStates.waiting_for_team_members)
    await message.answer(
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ ID —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã
@router.message(TournamentStates.waiting_for_team_members)
async def process_team_members(message: Message, state: FSMContext):
    data = await state.get_data()
    session = get_session()
    user = session.query(User).filter_by(telegram_id=message.from_user.id).first()
    
    try:
        member_ids = [int(id.strip()) for id in message.text.split(",")]
        if len(member_ids) < 1 or len(member_ids) > 5:
            raise ValueError
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        for member_id in member_ids:
            member = session.query(User).filter_by(id=member_id).first()
            if not member:
                raise ValueError
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ–± —É—á–∞—Å—Ç–∏–∏
        participant = TournamentParticipant(
            user_id=user.id,
            tournament_id=data['tournament_id'],
            team_name=data['team_name'],
            team_members=message.text,
            registered_at=datetime.now()
        )
        session.add(participant)
        session.commit()
        
        await state.clear()
        await message.answer(
            "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —Ç—É—Ä–Ω–∏—Ä!\n\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: {data['team_name']}\n"
            f"–£—á–∞—Å—Ç–Ω–∏–∫–∏: {message.text}"
        )
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ—Ç 1 –¥–æ 5 —á–∏—Å–ª–æ–≤—ã—Ö ID —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:"
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞
@router.callback_query(F.data.startswith("participants_"))
async def show_participants(callback: CallbackQuery):
    tournament_id = int(callback.data.split("_")[1])
    session = get_session()
    participants = session.query(TournamentParticipant).filter_by(
        tournament_id=tournament_id
    ).all()
    
    text = "üìã –£—á–∞—Å—Ç–Ω–∏–∫–∏ —Ç—É—Ä–Ω–∏—Ä–∞:\n\n"
    for participant in participants:
        text += f"–ö–æ–º–∞–Ω–¥–∞: {participant.team_name}\n"
        text += f"–£—á–∞—Å—Ç–Ω–∏–∫–∏: {participant.team_members}\n"
        text += f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {participant.registered_at.strftime('%d.%m.%Y')}\n\n"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"tournament_{tournament_id}")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–∞–≥—Ä–∞–¥ —Ç—É—Ä–Ω–∏—Ä–∞
@router.callback_query(F.data.startswith("rewards_"))
async def show_rewards(callback: CallbackQuery):
    tournament_id = int(callback.data.split("_")[1])
    session = get_session()
    tournament = session.query(Tournament).filter_by(id=tournament_id).first()
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"tournament_{tournament_id}")]
    ])
    
    await callback.message.edit_text(
        f"üèÜ –ù–∞–≥—Ä–∞–¥—ã —Ç—É—Ä–Ω–∏—Ä–∞ {tournament.name}:\n\n"
        f"{tournament.rewards}",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞
@router.callback_query(F.data == "create_tournament")
async def create_tournament(callback: CallbackQuery, state: FSMContext):
    await state.set_state(TournamentStates.waiting_for_name)
    await callback.message.edit_text(
        "üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞:"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞
@router.message(TournamentStates.waiting_for_name)
async def process_tournament_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(TournamentStates.waiting_for_description)
    await message.answer(
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞:"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞
@router.message(TournamentStates.waiting_for_description)
async def process_tournament_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await state.set_state(TournamentStates.waiting_for_start_date)
    await message.answer(
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ —Ç—É—Ä–Ω–∏—Ä–∞ (–¥–¥.–º–º.–≥–≥–≥–≥):"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ —Ç—É—Ä–Ω–∏—Ä–∞
@router.message(TournamentStates.waiting_for_start_date)
async def process_tournament_start_date(message: Message, state: FSMContext):
    try:
        start_date = datetime.strptime(message.text, "%d.%m.%Y")
        await state.update_data(start_date=start_date)
        await state.set_state(TournamentStates.waiting_for_rewards)
        await message.answer(
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–≥—Ä–∞–¥—ã —Ç—É—Ä–Ω–∏—Ä–∞:"
        )
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥:"
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥ —Ç—É—Ä–Ω–∏—Ä–∞
@router.message(TournamentStates.waiting_for_rewards)
async def process_tournament_rewards(message: Message, state: FSMContext):
    data = await state.get_data()
    session = get_session()
    
    tournament = Tournament(
        name=data['name'],
        description=data['description'],
        start_date=data['start_date'],
        rewards=message.text,
        status="active",
        created_at=datetime.now()
    )
    session.add(tournament)
    session.commit()
    
    await state.clear()
    await message.answer(
        "‚úÖ –¢—É—Ä–Ω–∏—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {data['name']}\n"
        f"–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {data['start_date'].strftime('%d.%m.%Y')}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {data['description']}\n"
        f"–ù–∞–≥—Ä–∞–¥—ã: {message.text}"
    ) 