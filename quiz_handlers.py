from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database import get_session, QuizQuestion, User, UserQuiz
import json
from datetime import datetime
import random

router = Router()

class QuizStates(StatesGroup):
    waiting_for_answer = State()
    waiting_for_question = State()
    waiting_for_options = State()
    waiting_for_correct_answer = State()
    waiting_for_reward = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
@router.callback_query(F.data == "quiz")
async def start_quiz(callback: CallbackQuery, state: FSMContext):
    session = get_session()
    user = session.query(User).filter_by(telegram_id=callback.from_user.id).first()
    
    if not user:
        await callback.message.edit_text(
            "‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å, —á—Ç–æ–±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ"
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –æ—Ç–≤–µ—á–∞–ª
    answered_questions = session.query(UserQuiz.question_id).filter_by(user_id=user.id).all()
    answered_question_ids = [q[0] for q in answered_questions]
    
    question = session.query(QuizQuestion).filter(
        QuizQuestion.id.notin_(answered_question_ids)
    ).order_by(QuizQuestion.id).first()
    
    if not question:
        await callback.message.edit_text(
            "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã.\n\n"
            "–ù–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–∑–∂–µ."
        )
        return
    
    options = json.loads(question.options)
    random.shuffle(options)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    for i, option in enumerate(options):
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(
                text=option,
                callback_data=f"answer_{question.id}_{i}"
            )
        ])
    
    keyboard.inline_keyboard.append([
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu")
    ])
    
    await state.set_state(QuizStates.waiting_for_answer)
    await state.update_data(question_id=question.id, correct_answer=question.correct_answer)
    
    await callback.message.edit_text(
        f"‚ùì –í–æ–ø—Ä–æ—Å:\n\n{question.question}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å
@router.callback_query(F.data.startswith("answer_"))
async def process_answer(callback: CallbackQuery, state: FSMContext):
    data = callback.data.split("_")
    question_id = int(data[1])
    answer_index = int(data[2])
    
    session = get_session()
    user = session.query(User).filter_by(telegram_id=callback.from_user.id).first()
    question = session.query(QuizQuestion).filter_by(id=question_id).first()
    
    options = json.loads(question.options)
    user_answer = options[answer_index]
    is_correct = user_answer == question.correct_answer
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    user_quiz = UserQuiz(
        user_id=user.id,
        question_id=question.id,
        answer=user_answer,
        is_correct=is_correct,
        answered_at=datetime.now()
    )
    session.add(user_quiz)
    
    if is_correct:
        user.diamonds += question.reward
        session.commit()
        
        await callback.message.edit_text(
            "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!\n\n"
            f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ {question.reward} üíé\n"
            f"–í–∞—à –±–∞–ª–∞–Ω—Å: {user.diamonds} üíé"
        )
    else:
        session.commit()
        
        await callback.message.edit_text(
            "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!\n\n"
            f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {question.correct_answer}"
        )
    
    await state.clear()
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å", callback_data="quiz")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu")]
    ])
    
    await callback.message.answer(
        "–•–æ—Ç–∏—Ç–µ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å?",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
@router.callback_query(F.data == "add_question")
async def add_question(callback: CallbackQuery, state: FSMContext):
    await state.set_state(QuizStates.waiting_for_question)
    await callback.message.edit_text(
        "üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞:"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞
@router.message(QuizStates.waiting_for_question)
async def process_question(message: Message, state: FSMContext):
    await state.update_data(question=message.text)
    await state.set_state(QuizStates.waiting_for_options)
    await message.answer(
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞
@router.message(QuizStates.waiting_for_options)
async def process_options(message: Message, state: FSMContext):
    options = [opt.strip() for opt in message.text.split(",")]
    if len(options) < 2:
        await message.answer(
            "‚ùå –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return
    
    await state.update_data(options=options)
    await state.set_state(QuizStates.waiting_for_correct_answer)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    for i, option in enumerate(options):
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(
                text=option,
                callback_data=f"correct_{i}"
            )
        ])
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
@router.callback_query(F.data.startswith("correct_"))
async def process_correct_answer(callback: CallbackQuery, state: FSMContext):
    answer_index = int(callback.data.split("_")[1])
    data = await state.get_data()
    options = data['options']
    correct_answer = options[answer_index]
    
    await state.update_data(correct_answer=correct_answer)
    await state.set_state(QuizStates.waiting_for_reward)
    
    await callback.message.edit_text(
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–≥—Ä–∞–¥—É –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ –∞–ª–º–∞–∑–∞—Ö:"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã
@router.message(QuizStates.waiting_for_reward)
async def process_reward(message: Message, state: FSMContext):
    try:
        reward = int(message.text)
        if reward <= 0:
            raise ValueError
        
        data = await state.get_data()
        session = get_session()
        
        question = QuizQuestion(
            question=data['question'],
            options=json.dumps(data['options']),
            correct_answer=data['correct_answer'],
            reward=reward,
            created_at=datetime.now()
        )
        session.add(question)
        session.commit()
        
        await state.clear()
        await message.answer(
            "‚úÖ –í–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
            f"–í–æ–ø—Ä–æ—Å: {data['question']}\n"
            f"–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞: {', '.join(data['options'])}\n"
            f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {data['correct_answer']}\n"
            f"–ù–∞–≥—Ä–∞–¥–∞: {reward} üíé"
        )
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–∞–≥—Ä–∞–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ:"
        ) 