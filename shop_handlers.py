from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database import get_session, ShopItem, User, UserItem
from datetime import datetime

router = Router()

class ShopStates(StatesGroup):
    waiting_for_item_name = State()
    waiting_for_item_description = State()
    waiting_for_item_price = State()
    waiting_for_item_category = State()
    waiting_for_item_image = State()
    waiting_for_search = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞
@router.callback_query(F.data == "shop")
async def show_shop(callback: CallbackQuery):
    session = get_session()
    user = session.query(User).filter_by(telegram_id=callback.from_user.id).first()
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞", callback_data="search_item"),
            InlineKeyboardButton(text="üìã –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="show_categories")
        ]
    ])
    
    if user and user.is_admin:
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="add_item")
        ])
    
    keyboard.inline_keyboard.append([
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu")
    ])
    
    await callback.message.edit_text(
        "üõç –ú–∞–≥–∞–∑–∏–Ω\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
@router.callback_query(F.data == "show_categories")
async def show_categories(callback: CallbackQuery):
    session = get_session()
    categories = session.query(ShopItem.category).distinct().all()
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    for category in categories:
        if category[0]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –ø—É—Å—Ç–∞—è
            keyboard.inline_keyboard.append([
                InlineKeyboardButton(
                    text=category[0],
                    callback_data=f"category_{category[0]}"
                )
            ])
    
    keyboard.inline_keyboard.append([
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="shop")
    ])
    
    await callback.message.edit_text(
        "üìã –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@router.callback_query(F.data.startswith("category_"))
async def show_category_items(callback: CallbackQuery):
    category = callback.data.split("_", 1)[1]
    session = get_session()
    items = session.query(ShopItem).filter_by(category=category).all()
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    for item in items:
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(
                text=f"{item.name} - {item.price} üíé",
                callback_data=f"item_{item.id}"
            )
        ])
    
    keyboard.inline_keyboard.append([
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="show_categories")
    ])
    
    await callback.message.edit_text(
        f"üìã –¢–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}'\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–≤–∞—Ä–∞
@router.callback_query(F.data.startswith("item_"))
async def show_item(callback: CallbackQuery):
    item_id = int(callback.data.split("_")[1])
    session = get_session()
    item = session.query(ShopItem).filter_by(id=item_id).first()
    user = session.query(User).filter_by(telegram_id=callback.from_user.id).first()
    
    if not item:
        await callback.message.edit_text("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    
    if user:
        user_item = session.query(UserItem).filter_by(
            user_id=user.id,
            item_id=item.id
        ).first()
        
        if not user_item:
            keyboard.inline_keyboard.append([
                InlineKeyboardButton(
                    text=f"–ö—É–ø–∏—Ç—å –∑–∞ {item.price} üíé",
                    callback_data=f"buy_{item.id}"
                )
            ])
    
    keyboard.inline_keyboard.append([
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"category_{item.category}")
    ])
    
    await callback.message.edit_text(
        f"üõç {item.name}\n\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {item.category}\n"
        f"–¶–µ–Ω–∞: {item.price} üíé\n\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ:\n{item.description}",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–∞
@router.callback_query(F.data.startswith("buy_"))
async def buy_item(callback: CallbackQuery):
    item_id = int(callback.data.split("_")[1])
    session = get_session()
    item = session.query(ShopItem).filter_by(id=item_id).first()
    user = session.query(User).filter_by(telegram_id=callback.from_user.id).first()
    
    if not user:
        await callback.message.edit_text(
            "‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å, —á—Ç–æ–±—ã –ø–æ–∫—É–ø–∞—Ç—å —Ç–æ–≤–∞—Ä—ã"
        )
        return
    
    if user.diamonds < item.price:
        await callback.message.edit_text(
            "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞–ª–º–∞–∑–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏"
        )
        return
    
    user.diamonds -= item.price
    user_item = UserItem(
        user_id=user.id,
        item_id=item.id,
        purchased_at=datetime.now()
    )
    session.add(user_item)
    session.commit()
    
    await callback.message.edit_text(
        "‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω!\n\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {item.name}\n"
        f"–¶–µ–Ω–∞: {item.price} üíé\n"
        f"–û—Å—Ç–∞—Ç–æ–∫ –∞–ª–º–∞–∑–æ–≤: {user.diamonds} üíé"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–∞
@router.callback_query(F.data == "search_item")
async def search_item(callback: CallbackQuery, state: FSMContext):
    await state.set_state(ShopStates.waiting_for_search)
    await callback.message.edit_text(
        "üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
@router.message(ShopStates.waiting_for_search)
async def process_search(message: Message, state: FSMContext):
    search_query = message.text.lower()
    session = get_session()
    items = session.query(ShopItem).filter(
        ShopItem.name.ilike(f"%{search_query}%")
    ).all()
    
    if not items:
        await message.answer(
            "‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å."
        )
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    for item in items:
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(
                text=f"{item.name} - {item.price} üíé",
                callback_data=f"item_{item.id}"
            )
        ])
    
    keyboard.inline_keyboard.append([
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="shop")
    ])
    
    await state.clear()
    await message.answer(
        f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{message.text}'\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
@router.callback_query(F.data == "add_item")
async def add_item(callback: CallbackQuery, state: FSMContext):
    await state.set_state(ShopStates.waiting_for_item_name)
    await callback.message.edit_text(
        "üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
@router.message(ShopStates.waiting_for_item_name)
async def process_item_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(ShopStates.waiting_for_item_description)
    await message.answer(
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
@router.message(ShopStates.waiting_for_item_description)
async def process_item_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await state.set_state(ShopStates.waiting_for_item_price)
    await message.answer(
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –≤ –∞–ª–º–∞–∑–∞—Ö:"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞
@router.message(ShopStates.waiting_for_item_price)
async def process_item_price(message: Message, state: FSMContext):
    try:
        price = int(message.text)
        await state.update_data(price=price)
        await state.set_state(ShopStates.waiting_for_item_category)
        await message.answer(
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:"
        )
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:"
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–∞
@router.message(ShopStates.waiting_for_item_category)
async def process_item_category(message: Message, state: FSMContext):
    data = await state.get_data()
    session = get_session()
    
    item = ShopItem(
        name=data['name'],
        description=data['description'],
        price=data['price'],
        category=message.text,
        created_at=datetime.now()
    )
    session.add(item)
    session.commit()
    
    await state.clear()
    await message.answer(
        "‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {data['name']}\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {message.text}\n"
        f"–¶–µ–Ω–∞: {data['price']} üíé\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {data['description']}"
    ) 