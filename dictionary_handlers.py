from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database import get_session, DictionaryTerm, User
from datetime import datetime

router = Router()

class DictionaryStates(StatesGroup):
    waiting_for_term = State()
    waiting_for_description = State()
    waiting_for_category = State()
    waiting_for_search = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ª–æ–≤–∞—Ä—è
@router.callback_query(F.data == "dictionary")
async def show_dictionary(callback: CallbackQuery):
    session = get_session()
    user = session.query(User).filter_by(telegram_id=callback.from_user.id).first()
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ —Ç–µ—Ä–º–∏–Ω–∞", callback_data="search_term"),
            InlineKeyboardButton(text="üìã –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="show_categories")
        ]
    ])
    
    if user and user.is_admin:
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Ä–º–∏–Ω", callback_data="add_term")
        ])
    
    keyboard.inline_keyboard.append([
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu")
    ])
    
    await callback.message.edit_text(
        "üìö –°–ª–æ–≤–∞—Ä—å —Ç–µ—Ä–º–∏–Ω–æ–≤\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
@router.callback_query(F.data == "show_categories")
async def show_categories(callback: CallbackQuery):
    session = get_session()
    categories = session.query(DictionaryTerm.category).distinct().all()
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    for category in categories:
        if category[0]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –ø—É—Å—Ç–∞—è
            keyboard.inline_keyboard.append([
                InlineKeyboardButton(
                    text=category[0],
                    callback_data=f"category_{category[0]}"
                )
            ])
    
    keyboard.inline_keyboard.append([
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="dictionary")
    ])
    
    await callback.message.edit_text(
        "üìã –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–µ—Ä–º–∏–Ω–æ–≤\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ—Ä–º–∏–Ω–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@router.callback_query(F.data.startswith("category_"))
async def show_category_terms(callback: CallbackQuery):
    category = callback.data.split("_", 1)[1]
    session = get_session()
    terms = session.query(DictionaryTerm).filter_by(category=category).all()
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    for term in terms:
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(
                text=term.term,
                callback_data=f"term_{term.id}"
            )
        ])
    
    keyboard.inline_keyboard.append([
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="show_categories")
    ])
    
    await callback.message.edit_text(
        f"üìã –¢–µ—Ä–º–∏–Ω—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}'\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Ä–º–∏–Ω –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ—Ä–º–∏–Ω–∞
@router.callback_query(F.data.startswith("term_"))
async def show_term(callback: CallbackQuery):
    term_id = int(callback.data.split("_")[1])
    session = get_session()
    term = session.query(DictionaryTerm).filter_by(id=term_id).first()
    
    if not term:
        await callback.message.edit_text("‚ùå –¢–µ—Ä–º–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"category_{term.category}")]
    ])
    
    await callback.message.edit_text(
        f"üìö {term.term}\n\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {term.category}\n\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ:\n{term.description}",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ —Ç–µ—Ä–º–∏–Ω–∞
@router.callback_query(F.data == "search_term")
async def search_term(callback: CallbackQuery, state: FSMContext):
    await state.set_state(DictionaryStates.waiting_for_search)
    await callback.message.edit_text(
        "üîç –ü–æ–∏—Å–∫ —Ç–µ—Ä–º–∏–Ω–∞\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
@router.message(DictionaryStates.waiting_for_search)
async def process_search(message: Message, state: FSMContext):
    search_query = message.text.lower()
    session = get_session()
    terms = session.query(DictionaryTerm).filter(
        DictionaryTerm.term.ilike(f"%{search_query}%")
    ).all()
    
    if not terms:
        await message.answer(
            "‚ùå –¢–µ—Ä–º–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å."
        )
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    for term in terms:
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(
                text=f"{term.term} ({term.category})",
                callback_data=f"term_{term.id}"
            )
        ])
    
    keyboard.inline_keyboard.append([
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="dictionary")
    ])
    
    await state.clear()
    await message.answer(
        f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{message.text}'\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Ä–º–∏–Ω –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Ä–º–∏–Ω–∞
@router.callback_query(F.data == "add_term")
async def add_term(callback: CallbackQuery, state: FSMContext):
    await state.set_state(DictionaryStates.waiting_for_term)
    await callback.message.edit_text(
        "üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–∞\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–∞:"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–µ—Ä–º–∏–Ω–∞
@router.message(DictionaryStates.waiting_for_term)
async def process_term(message: Message, state: FSMContext):
    await state.update_data(term=message.text)
    await state.set_state(DictionaryStates.waiting_for_description)
    await message.answer(
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–∞:"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è —Ç–µ—Ä–º–∏–Ω–∞
@router.message(DictionaryStates.waiting_for_description)
async def process_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await state.set_state(DictionaryStates.waiting_for_category)
    await message.answer(
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–µ—Ä–º–∏–Ω–∞:"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–µ—Ä–º–∏–Ω–∞
@router.message(DictionaryStates.waiting_for_category)
async def process_category(message: Message, state: FSMContext):
    data = await state.get_data()
    session = get_session()
    
    term = DictionaryTerm(
        term=data['term'],
        description=data['description'],
        category=message.text,
        created_at=datetime.now()
    )
    session.add(term)
    session.commit()
    
    await state.clear()
    await message.answer(
        "‚úÖ –¢–µ—Ä–º–∏–Ω —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {data['term']}\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {message.text}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {data['description']}"
    ) 